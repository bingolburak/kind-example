{{/*
  There are 3 cases (priority from high to low)...
  * sign+verify keys given via string input:
      - Generate filename (e.g. `/secrets/jwt.sign.key`) to be used in configmap
      - Use base64 notation to create secret entries (e.g. `jwt.sign.key`)
  * secret references + key inside secret given:
      - Create secret volume + volumeMount (path)
      - Use filenames in configmap, generated from volumeMounts + secret inside key from created volumeMount
      - Don't create extra secret
  * neither filepath nor string input nor secret reference given:
      - Generate filename `/secrets/jwt.sign.key` to be used in configmap
      - Generate private key to be used in secret (`jwt.sign.key`). No verify key is needed since tex-service can calculate it from private key.
*/}}

{{- define "jwt.configmap" -}}
  {{- $jwt := deepCopy .Values.texService.jwt -}}
  {{- $_ := set $jwt "issuer" (include "jwt.issuer" .) -}}
  {{- if .Values.texService.jwt.keys.fromString.signKey -}}
    {{- $_ := set $jwt.keys "filepaths" dict}}
    {{- $_ := required "Please provide a signing algorithm of [RS256, RS384, RS512, ES256, ES384, ES512]" .Values.texService.jwt.signingAlgorithm -}}
    {{- $_ := set $jwt.keys.filepaths "signKey" "/secrets/jwt.sign.key" -}}
    {{- $_ := set $jwt.keys.filepaths "verifyKeys" list -}}
    {{- range $index, $_ := .Values.texService.jwt.keys.fromString.verifyKeys -}}
    {{- $_ := set $jwt.keys.filepaths "verifyKeys" (append $jwt.keys.filepaths.verifyKeys (printf "/secrets/jwt.verify%d.key" $index)) -}}
    {{- end -}}
  {{- else if .Values.texService.jwt.keys.fromSecret.signKey.secretName -}}
    {{- $_ := required "Please provide the property key inside the given secret" .Values.texService.jwt.keys.fromSecret.signKey.key -}}
    {{- $_ := required "Please provide a signing algorithm of [RS256, RS384, RS512, ES256, ES384, ES512]" .Values.texService.jwt.signingAlgorithm -}}
    {{- $_ := set $jwt.keys "filepaths" dict}}
    {{- $_ := set $jwt.keys.filepaths "signKey" (printf "/unmanaged-secrets/%s/%s" .Values.texService.jwt.keys.fromSecret.signKey.secretName .Values.texService.jwt.keys.fromSecret.signKey.key) -}}
    {{- $_ := set $jwt.keys.filepaths "verifyKeys" list -}}
    {{- range $index, $ref := .Values.texService.jwt.keys.fromSecret.verifyKeys -}}
    {{- if and $ref.secretName $ref.key -}}
    {{- $_ := set $jwt.keys.filepaths "verifyKeys" (append $jwt.keys.filepaths.verifyKeys (printf "/unmanaged-secrets/%s/%s" $ref.secretName $ref.key)) -}}
    {{- end -}}
    {{- end -}}
  {{- else if .Values.texService.jwt.keys.filepaths -}}
    {{/* Do nothing */}}
  {{- else -}}
    {{- if not (empty .Values.texService.jwt.signingAlgorithm) -}}
      {{- fail "Please leave signingAlgorithm empty if you want keys to be autogenerated" -}}
    {{- end -}}
    {{- $_ := set $jwt "signingAlgorithm" "RS512" -}}
    {{- $_ := set $jwt.keys "filepaths" dict}}
    {{- $_ := set $jwt.keys.filepaths "signKey" "/secrets/jwt.sign.key" -}}
    {{- $_ := set $jwt.keys.filepaths "verifyKeys" list -}}
  {{- end -}}
  {{- $_ := unset $jwt.keys "fromSecret" -}}
  {{- $_ := unset $jwt.keys "fromString" -}}
{{ toYaml $jwt }}
{{- end -}}

{{- define "jwt.volumeMounts" -}}
  {{- if .Values.texService.jwt.keys.fromString.signKey -}}
    {{/* Do nothing */}}
  {{- else if .Values.texService.jwt.keys.fromSecret.signKey.secretName -}}
    {{- $volumeMounts := dict -}}
    {{- $_ := required "Please provide a secret name for tex-service-helm.texService.jwt.keys.fromSecret.signKey" .Values.texService.jwt.keys.fromSecret.signKey.secretName -}}
    {{- $_ := required "Please provide a property key for tex-service-helm.texService.jwt.keys.fromSecret.signKey" .Values.texService.jwt.keys.fromSecret.signKey.key -}}
    {{- $_ := set $volumeMounts .Values.texService.jwt.keys.fromSecret.signKey.secretName .Values.texService.jwt.keys.fromSecret.signKey.key -}}
    {{- range $index, $ref := .Values.texService.jwt.keys.fromSecret.verifyKeys -}}
      {{- $_ := required (printf "Please provide a secret name for tex-service-helm.texService.jwt.keys.fromSecret.verifyKeys[%d]" $index) $ref.secretName -}}
      {{- $_ := required (printf "Please provide a property key for tex-service-helm.texService.jwt.keys.fromSecret.verifyKeys[%d]" $index) $ref.key -}}
      {{- $_ := set $volumeMounts $ref.secretName $ref.key -}}
    {{- end -}}
    {{- range $secret, $_ := $volumeMounts }}
- mountPath: "/unmanaged-secrets/{{ $secret }}"
  name: "{{ $secret }}"
  readOnly: true
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- define "jwt.volumes" -}}
  {{- if .Values.texService.jwt.keys.fromString.signKey -}}
    {{/* Do nothing */}}
  {{- else if .Values.texService.jwt.keys.fromSecret.signKey.secretName -}}
    {{- $volumes := dict -}}
    {{- $_ := required "Please provide a secret name for tex-service-helm.texService.jwt.keys.fromSecret.signKey" .Values.texService.jwt.keys.fromSecret.signKey.secretName -}}
    {{- $_ := required "Please provide a property key for tex-service-helm.texService.jwt.keys.fromSecret.signKey" .Values.texService.jwt.keys.fromSecret.signKey.key -}}
    {{- $_ := set $volumes .Values.texService.jwt.keys.fromSecret.signKey.secretName .Values.texService.jwt.keys.fromSecret.signKey.key -}}
    {{- range $index, $ref := .Values.texService.jwt.keys.fromSecret.verifyKeys -}}
      {{- $_ := required (printf "Please provide a secret name for tex-service-helm.texService.jwt.keys.fromSecret.verifyKeys[%d]" $index) $ref.secretName -}}
      {{- $_ := required (printf "Please provide a property key for tex-service-helm.texService.jwt.keys.fromSecret.verifyKeys[%d]" $index) $ref.key -}}
      {{- $_ := set $volumes $ref.secretName $ref.key -}}
    {{- end -}}
    {{- range $secret, $_ := $volumes }}
- name: {{ $secret }}
  secret:
    secretName: {{ $secret }}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- define "jwt.secret" -}}
  {{- if .Values.texService.jwt.keys.fromString.signKey -}}
jwt.sign.key: {{ .Values.texService.jwt.keys.fromString.signKey | b64enc | quote }}
    {{- range $index, $key := .Values.texService.jwt.keys.fromString.verifyKeys }}
jwt.verify{{$index}}.key: {{ $key | b64enc | quote }}
    {{- end }}
  {{- else if .Values.texService.jwt.keys.fromSecret.signKey.secretName }}
    {{/* Do nothing */}}
  {{- else -}}
    {{- $key := genPrivateKey "rsa" -}}
jwt.sign.key: {{ $key | b64enc | quote }}
  {{- end -}}
{{- end -}}


{{- define "jwt.issuer" -}}
{{- if empty .Values.texService.jwt.issuer -}}
http://{{.Values.resourceName}}.{{ .Release.Namespace }}
{{- else -}}
{{ .Values.texService.jwt.issuer }}
{{- end -}}
{{- end -}}