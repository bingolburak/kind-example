{{- define "migrate.texCaddy" -}}
    {{- if empty .Values.global.oidcProviderPreset -}}
        {{- if .Values.global.configuredOp -}}
            {{- set .Values.global "oidcProviderPreset" .Values.global.configuredOp -}}
        {{- end -}}
    {{- end -}}
    {{- if empty .Values.global.oidcProvider.clientCredentials.authCode.clientID -}}
        {{- if .Values.global.oidcProvider.clientId -}}
            {{- set .Values.global.oidcProvider.clientCredentials.authCode "clientID" .Values.global.oidcProvider.clientId -}}
        {{- end -}}
    {{- end -}}
    {{- if empty .Values.global.oidcProvider.clientCredentials.authCode.clientSecret -}}
        {{- if .Values.global.oidcProvider.clientSecret -}}
            {{- set .Values.global.oidcProvider.clientCredentials.authCode "clientSecret" .Values.global.oidcProvider.clientSecret -}}
        {{- end -}}
    {{- end -}}
    {{- if empty .Values.global.oidcProvider.clientCredentials.tokenIntrospection.clientID -}}
        {{- if .Values.global.oidcProvider.introspectionClientId -}}
            {{- set .Values.global.oidcProvider.clientCredentials.tokenIntrospection "clientID" .Values.global.oidcProvider.introspectionClientId -}}
        {{- end -}}
    {{- end -}}
    {{- if empty .Values.global.oidcProvider.clientCredentials.tokenIntrospection.clientSecret -}}
        {{- if .Values.global.oidcProvider.introspectionClientSecret -}}
            {{- set .Values.global.oidcProvider.clientCredentials.tokenIntrospection "clientSecret" .Values.global.oidcProvider.introspectionClientSecret -}}
        {{- end -}}
    {{- end -}}
    {{- if empty .Values.global.tokenExchange.credentials.clientID -}}
        {{- if .Values.global.tokenExchange.clientId -}}
            {{- set .Values.global.tokenExchange.credentials "clientID" .Values.global.tokenExchange.clientId -}}
        {{- end -}}
    {{- end -}}
    {{- if empty .Values.global.tokenExchange.credentials.clientSecret -}}
        {{- if .Values.global.tokenExchange.clientSecret -}}
            {{- set .Values.global.tokenExchange.credentials "clientSecret" .Values.global.tokenExchange.clientSecret -}}
        {{- end -}}
    {{- end -}}
    {{- if empty .Values.global.oidcProvider.endpoints.authorization.redirectUrl -}}
        {{- if .Values.texCaddy.oidcProvider -}}
        {{- if .Values.texCaddy.oidcProvider.redirectUrl -}}
            {{- set .Values.global.oidcProvider.endpoints.authorization "redirectUrl" .Values.texCaddy.oidcProvider.redirectUrl -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if deepEqual .Values.global.oidcProvider.endpoints.authorization.scopes (list "openid" "profile" "email") -}}
        {{- if .Values.texCaddy.oidcProvider -}}
        {{- if ne .Values.texCaddy.oidcProvider.scopes "openid,profile,email" -}}
            {{- set .Values.global.oidcProvider.endpoints.authorization "scopes" (splitList "," .Values.texCaddy.oidcProvider.scopes) -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if eq .Values.texCaddy.routes.loginUrl "/login" -}}
        {{- if .Values.texCaddy.loginUrl -}}
        {{- if ne .Values.texCaddy.loginUrl "/login" -}}
            {{- set .Values.texCaddy.routes "loginUrl" .Values.texCaddy.loginUrl -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if eq .Values.texCaddy.routes.logoutUrl "/logout" -}}
        {{- if .Values.texCaddy.logoutUrl -}}
        {{- if ne .Values.texCaddy.logoutUrl "/logout" -}}
            {{- set .Values.texCaddy.routes "logoutUrl" .Values.texCaddy.logoutUrl -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if empty .Values.texCaddy.routes.applicationBaseUrl -}}
        {{- if not (empty .Values.texCaddy.applicationBaseUrl) -}}
            {{- set .Values.texCaddy.routes "applicationBaseUrl" .Values.texCaddy.applicationBaseUrl -}}
        {{- end -}}
    {{- end -}}
    {{- if empty .Values.texCaddy.cookies.tex.domain -}}
        {{- if .Values.texCaddy.cookie -}}
        {{- if .Values.texCaddy.cookie.domain -}}
            {{- set .Values.texCaddy.cookies.tex "domain" .Values.texCaddy.cookie.domain -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if eq .Values.texCaddy.cookies.tex.path "/" -}}
        {{- if .Values.texCaddy.cookie -}}
        {{- if .Values.texCaddy.cookie.path -}}
        {{- if ne .Values.texCaddy.cookie.path "/" -}}
            {{- set .Values.texCaddy.cookies.tex "path" .Values.texCaddy.cookie.path -}}
        {{- end -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if or (empty .Values.texCaddy.cookies.tex.blockKey.fromString.active) (empty .Values.texCaddy.cookies.tex.blockKey.fromSecret.active) -}}
        {{- if .Values.texCaddy.cookie -}}
        {{- if .Values.texCaddy.cookie.blockKey -}}
            {{- set .Values.texCaddy.cookies.tex.blockKey.fromString "active" .Values.texCaddy.cookie.blockKey -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if or (empty .Values.texCaddy.cookies.tex.hashKey.fromString.active) (empty .Values.texCaddy.cookies.tex.hashKey.fromSecret.active) -}}
        {{- if .Values.texCaddy.cookie -}}
        {{- if .Values.texCaddy.cookie.hashKey -}}
            {{- set .Values.texCaddy.cookies.tex.hashKey.fromString "active" .Values.texCaddy.cookie.hashKey -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if eq (len .Values.texCaddy.caddyfile.tex.paths) 1 -}}
    {{- if deepEqual (first .Values.texCaddy.caddyfile.tex.paths) (dict "ui" (list "/")) -}}
        {{- if .Values.texCaddy.caddyfile.http -}}
        {{- if not (deepEqual .Values.texCaddy.caddyfile.http.tex (dict "except" (list) "api" (list) "ui" (list "/") )) -}}
            {{- set .Values.texCaddy.caddyfile.tex "paths" (list .Values.texCaddy.caddyfile.http.tex) -}}
        {{- end -}}
        {{- end -}}
        {{- if .Values.texCaddy.caddyfile.https -}}
        {{- if not (deepEqual .Values.texCaddy.caddyfile.https.tex (dict "except" (list) "api" (list) "ui" (list "/") )) -}}
            {{- set .Values.texCaddy.caddyfile.tex "paths" (list .Values.texCaddy.caddyfile.https.tex) -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- end -}}
    {{- if not .Values.inbound.ingress.enabled -}}
        {{- if .Values.ingress -}}
        {{- if .Values.ingress.enabled -}}
            {{- set .Values.inbound "ingress" .Values.ingress -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if not .Values.inbound.ingress.enabled -}}
        {{- if .Values.ingress -}}
        {{- if .Values.ingress.enabled -}}
            {{- set .Values.inbound "ingress" .Values.ingress -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if eq .Values.inbound.service.type "ClusterIP" -}}
        {{- if .Values.service -}}
        {{- if ne .Values.service.type "ClusterIP" -}}
            {{- set .Values.inbound "service" .Values.service -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
    {{- if not .Values.inbound.tls.enabled -}}
        {{- if .Values.ingressCert -}}
        {{- if .Values.ingressCert.enabled -}}
        {{- if .Values.ingressCert.tlsCrt -}}
        {{- if .Values.ingressCert.tlsKey -}}
            {{- set .Values.inbound.tls.certificate.fromBase64 "cert" .Values.ingressCert.tlsCrt -}}
            {{- set .Values.inbound.tls.certificate.fromBase64 "key" .Values.ingressCert.tlsKey -}}
        {{- end -}}
        {{- end -}}
        {{- else if .Values.ingress -}}
        {{- if .Values.ingress.tls -}}
        {{- if and .Values.ingress.tls.enabled (ne .Values.ingress.tls.secretName "ingress-certs") -}}
            {{- set .Values.inbound.tls.certificate "fromSecret" .Values.ingress.tls.secretName -}}
        {{- end -}}
        {{- end -}}
        {{- end -}}
        {{- end -}}
    {{- end -}}
{{- end -}}